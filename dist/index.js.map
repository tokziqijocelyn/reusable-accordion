{"version":3,"sources":["../index.tsx","../lib/utils.ts"],"sourcesContent":["import * as Component from \"@radix-ui/react-accordion\";\r\nimport React from \"react\";\r\nimport { ChevronDown } from \"lucide-react\";\r\nimport { LucideType } from \"lucide-react\";\r\nimport { cn } from \"../accordion/lib/utils\";\r\nimport \"./global.css\";\r\n\r\n// We want to take in a few things, data, and style\r\ntype Props = {\r\n  // data passed in to be an array\r\n  data?: any;\r\n  // only one can be opened at a time?\r\n  single?: SingleOrMultiple;\r\n  // icon?: typeof LucideType;\r\n};\r\n\r\n// What kind of data can we see?\r\ntype data = {\r\n  header: string;\r\n  content: string;\r\n};\r\n\r\nenum SingleOrMultiple {\r\n  Single = \"single\",\r\n  Multiple = \"multiple\",\r\n}\r\n\r\n//disabled style\r\nconst accordionVariants = cn(\"bg-header\", {\r\n  variants: {\r\n    variant: {\r\n      default: \"text-contentText\",\r\n      disabled: \"text-disabledText \",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    variant: \"default\",\r\n  },\r\n});\r\n\r\nconst Accordion = (props: Props) => {\r\n  const {\r\n    data,\r\n    single = SingleOrMultiple.Single,\r\n    // icon\r\n  } = props;\r\n  return (\r\n    <Component.Root type={single} className=\"rounded-md \" collapsible>\r\n      {data.map((item: data) => {\r\n        return (\r\n          <AccordionItem value={props.data.header}>\r\n            <AccordionTrigger>\r\n              {/* props.icon && {props.icon} */}\r\n              {props.data.content}\r\n            </AccordionTrigger>\r\n\r\n            <AccordionContent>\r\n              <p>{props.data.content}</p>\r\n            </AccordionContent>\r\n          </AccordionItem>\r\n        );\r\n      })}\r\n    </Component.Root>\r\n  );\r\n};\r\n\r\ntype AccordionItemProps = {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  value: string;\r\n};\r\n\r\ntype AccordionTriggerProps = {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n};\r\n\r\nconst AccordionItem = React.forwardRef<HTMLDivElement, AccordionItemProps>(\r\n  ({ children, className, ...props }, forwardedRef) => (\r\n    <Component.Item\r\n      className={cn(\r\n        \"mt-px overflow-hidden first:mt-0 first:rounded-t last:rounded-b focus-within:relative focus-within:z-10 focus-within:shadow-[0_0_0_2px]\",\r\n        className\r\n      )}\r\n      {...props}\r\n      ref={forwardedRef}\r\n      value={props.value}\r\n    >\r\n      {children}\r\n    </Component.Item>\r\n  )\r\n);\r\n\r\nconst AccordionTrigger = React.forwardRef<\r\n  HTMLButtonElement,\r\n  AccordionTriggerProps\r\n>(({ children, className, ...props }, forwardedRef) => (\r\n  <Component.Header className=\"flex\">\r\n    <Component.Trigger\r\n      className={cn(\r\n        \"bg-red-300 py-3 px-2 flex flex-row justify-between min-h-0 w-full group\",\r\n        className\r\n      )}\r\n      {...props}\r\n      ref={forwardedRef}\r\n    >\r\n      {children}\r\n      <ChevronDown\r\n        className=\"text-contentText ease-[cubic-bezier(0.87,_0,_0.13,_1)] transition-transform duration-300 group-data-[state=open]:rotate-180\"\r\n        aria-hidden\r\n      />\r\n    </Component.Trigger>\r\n  </Component.Header>\r\n));\r\n\r\nconst AccordionContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  AccordionTriggerProps\r\n>(({ children, className, ...props }, forwardedRef) => (\r\n  <Component.Content\r\n    className={cn(\r\n      \"bg-white p-1 data-[state=open]:animate-slideDown data-[state=closed]:animate-slideUp overflow-hidden text-[15px]\",\r\n      className\r\n    )}\r\n    {...props}\r\n    ref={forwardedRef}\r\n  >\r\n    <div className=\"bg-contentBar h-full w-1\"></div>\r\n    <div className=\"py-[15px] px-5\">{children}</div>\r\n  </Component.Content>\r\n));\r\n\r\nexport default Accordion;\r\n","import { type ClassValue, clsx } from \"clsx\"\r\nimport { twMerge } from \"tailwind-merge\"\r\n \r\n// eslint-disable-next-line import/prefer-default-export\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs))\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA2B;AAC3B,mBAAkB;AAClB,0BAA4B;;;ACF5B,kBAAsC;AACtC,4BAAwB;AAGjB,SAAS,MAAM,QAAsB;AAC1C,aAAO,mCAAQ,kBAAK,MAAM,CAAC;AAC7B;;;AD4CU;AAtBV,IAAM,oBAAoB,GAAG,aAAa;AAAA,EACxC,UAAU;AAAA,IACR,SAAS;AAAA,MACP,SAAS;AAAA,MACT,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA,iBAAiB;AAAA,IACf,SAAS;AAAA,EACX;AACF,CAAC;AAED,IAAM,YAAY,CAAC,UAAiB;AAClC,QAAM;AAAA,IACJ;AAAA,IACA,SAAS;AAAA;AAAA,EAEX,IAAI;AACJ,SACE,4CAAW,gBAAV,EAAe,MAAM,QAAQ,WAAU,eAAc,aAAW,MAC9D,eAAK,IAAI,CAAC,SAAe;AACxB,WACE,6CAAC,iBAAc,OAAO,MAAM,KAAK,QAC/B;AAAA,kDAAC,oBAEE,gBAAM,KAAK,SACd;AAAA,MAEA,4CAAC,oBACC,sDAAC,OAAG,gBAAM,KAAK,SAAQ,GACzB;AAAA,OACF;AAAA,EAEJ,CAAC,GACH;AAEJ;AAaA,IAAM,gBAAgB,aAAAA,QAAM;AAAA,EAC1B,CAAC,IAAmC,iBAAc;AAAjD,iBAAE,YAAU,UA9Ef,IA8EG,IAA0B,kBAA1B,IAA0B,CAAxB,YAAU;AACX;AAAA,MAAW;AAAA,MAAV;AAAA,QACC,WAAW;AAAA,UACT;AAAA,UACA;AAAA,QACF;AAAA,SACI,QALL;AAAA,QAMC,KAAK;AAAA,QACL,OAAO,MAAM;AAAA,QAEZ;AAAA;AAAA,IACH;AAAA;AAEJ;AAEA,IAAM,mBAAmB,aAAAA,QAAM,WAG7B,CAAC,IAAmC,iBAAc;AAAjD,eAAE,YAAU,UAhGf,IAgGG,IAA0B,kBAA1B,IAA0B,CAAxB,YAAU;AACb,qDAAW,kBAAV,EAAiB,WAAU,QAC1B;AAAA,IAAW;AAAA,IAAV;AAAA,MACC,WAAW;AAAA,QACT;AAAA,QACA;AAAA,MACF;AAAA,OACI,QALL;AAAA,MAMC,KAAK;AAAA,MAEJ;AAAA;AAAA,QACD;AAAA,UAAC;AAAA;AAAA,YACC,WAAU;AAAA,YACV,eAAW;AAAA;AAAA,QACb;AAAA;AAAA;AAAA,EACF,GACF;AAAA,CACD;AAED,IAAM,mBAAmB,aAAAA,QAAM,WAG7B,CAAC,IAAmC,iBAAc;AAAjD,eAAE,YAAU,UAtHf,IAsHG,IAA0B,kBAA1B,IAA0B,CAAxB,YAAU;AACb;AAAA,IAAW;AAAA,IAAV;AAAA,MACC,WAAW;AAAA,QACT;AAAA,QACA;AAAA,MACF;AAAA,OACI,QALL;AAAA,MAMC,KAAK;AAAA,MAEL;AAAA,oDAAC,SAAI,WAAU,4BAA2B;AAAA,QAC1C,4CAAC,SAAI,WAAU,kBAAkB,UAAS;AAAA;AAAA;AAAA,EAC5C;AAAA,CACD;AAED,IAAO,oBAAQ;","names":["React"]}